//using System;
//using System.Collections.Generic;
//using System.Data;
//using System.Linq;
//using System.Text;

//namespace EFCore.SpCudExtensions
//{
//    public static class DefaultMappings
//    {
//        public static Type GetClrType(SqlDbType sqlType, bool isNullable)
//        {
//            switch (sqlType)
//            {
//                case SqlDbType.BigInt:
//                    return isNullable ? typeof(long?) : typeof(long);

//                case SqlDbType.Binary:
//                case SqlDbType.Image:
//                case SqlDbType.Timestamp:
//                case SqlDbType.VarBinary:
//                    return typeof(byte[]);

//                case SqlDbType.Bit:
//                    return isNullable ? typeof(bool?) : typeof(bool);

//                case SqlDbType.Char:
//                case SqlDbType.NChar:
//                case SqlDbType.NText:
//                case SqlDbType.NVarChar:
//                case SqlDbType.Text:
//                case SqlDbType.VarChar:
//                case SqlDbType.Xml:
//                    return typeof(string);

//                case SqlDbType.DateTime:
//                case SqlDbType.SmallDateTime:
//                case SqlDbType.Date:
//                case SqlDbType.Time:
//                case SqlDbType.DateTime2:
//                    return isNullable ? typeof(DateTime?) : typeof(DateTime);

//                case SqlDbType.Decimal:
//                case SqlDbType.Money:
//                case SqlDbType.SmallMoney:
//                    return isNullable ? typeof(decimal?) : typeof(decimal);

//                case SqlDbType.Float:
//                    return isNullable ? typeof(double?) : typeof(double);

//                case SqlDbType.Int:
//                    return isNullable ? typeof(int?) : typeof(int);

//                case SqlDbType.Real:
//                    return isNullable ? typeof(float?) : typeof(float);

//                case SqlDbType.UniqueIdentifier:
//                    return isNullable ? typeof(Guid?) : typeof(Guid);

//                case SqlDbType.SmallInt:
//                    return isNullable ? typeof(short?) : typeof(short);

//                case SqlDbType.TinyInt:
//                    return isNullable ? typeof(byte?) : typeof(byte);

//                case SqlDbType.Variant:
//                case SqlDbType.Udt:
//                    return typeof(object);

//                case SqlDbType.Structured:
//                    return typeof(DataTable);

//                case SqlDbType.DateTimeOffset:
//                    return isNullable ? typeof(DateTimeOffset?) : typeof(DateTimeOffset);

//                default:
//                    throw new ArgumentOutOfRangeException("sqlType");
//            }
//        }

//        public static SqlDbType GetSqlDbType(Type ClrType)
//        {
//            SqlDbType resulttype = SqlDbType.NVarChar;
//            Dictionary<Type, SqlDbType> Types = new Dictionary<Type, SqlDbType>
//            {
//                { typeof(Boolean), SqlDbType.Bit },
//                { typeof(String), SqlDbType.NVarChar },
//                { typeof(DateTime), SqlDbType.DateTime },
//                { typeof(Int16), SqlDbType.Int },
//                { typeof(Int32), SqlDbType.Int },
//                { typeof(Int64), SqlDbType.Int },
//                { typeof(Decimal), SqlDbType.Float },
//                { typeof(Double), SqlDbType.Float }
//            };
//            Types.TryGetValue(ClrType, out resulttype);
//            return resulttype;
//        }

//        private static Dictionary<string, Type> Mappings = new Dictionary<string, Type> {
//                { "bigint", typeof(Int64) },
//                { "binary", typeof(Byte[]) },
//                { "bit", typeof(Boolean) },
//                { "char", typeof(String) },
//                { "date", typeof(DateTime) },
//                { "datetime", typeof(DateTime) },
//                { "datetime2", typeof(DateTime) },
//                { "datetimeoffset", typeof(DateTimeOffset) },
//                { "decimal", typeof(Decimal) },
//                { "float", typeof(Double) },
//                { "image", typeof(Byte[]) },
//                { "int", typeof(Int32) },
//                { "money", typeof(Decimal) },
//                { "nchar", typeof(String) },
//                { "ntext", typeof(String) },
//                { "numeric", typeof(Decimal) },
//                { "nvarchar", typeof(String) },
//                { "real", typeof(Single) },
//                { "rowversion", typeof(Byte[]) },
//                { "smalldatetime", typeof(DateTime) },
//                { "smallint", typeof(Int16) },
//                { "smallmoney", typeof(Decimal) },
//                { "text", typeof(String) },
//                { "time", typeof(TimeSpan) },
//                { "timestamp", typeof(Byte[]) },
//                { "tinyint", typeof(Byte) },
//                { "uniqueidentifier", typeof(Guid) },
//                { "varbinary", typeof(Byte[]) },
//                { "varchar", typeof(String) }
//            };

//        public static Type ToClrType(this string sqlType)
//        {
//            if (Mappings.TryGetValue(sqlType, out Type datatype))
//                return datatype;
//            throw new TypeLoadException(string.Format("Can not load CLR Type from {0}", sqlType));
//        }

//        public static string ToSqlType(this Type clrType)
//        {
//            if (Mappings.ContainsValue(clrType))
//                return Mappings.FirstOrDefault(m => m.Value == clrType).Key;
//            throw new TypeLoadException(string.Format("Can not load SQL Type from {0}", nameof(clrType)));
//        }
//    }
//}